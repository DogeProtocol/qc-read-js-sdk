/**
 * QC Read API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransactionReceipt from './TransactionReceipt';

/**
 * The TransactionDetails model module.
 * @module model/TransactionDetails
 * @version v1
 */
class TransactionDetails {
    /**
     * Constructs a new <code>TransactionDetails</code>.
     * @alias module:model/TransactionDetails
     */
    constructor() { 
        
        TransactionDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransactionDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionDetails} obj Optional instance to populate.
     * @return {module:model/TransactionDetails} The populated <code>TransactionDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionDetails();

            if (data.hasOwnProperty('blockHash')) {
                obj['blockHash'] = ApiClient.convertToType(data['blockHash'], 'String');
            }
            if (data.hasOwnProperty('blockNumber')) {
                obj['blockNumber'] = ApiClient.convertToType(data['blockNumber'], 'Number');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], 'String');
            }
            if (data.hasOwnProperty('gas')) {
                obj['gas'] = ApiClient.convertToType(data['gas'], 'String');
            }
            if (data.hasOwnProperty('gasPrice')) {
                obj['gasPrice'] = ApiClient.convertToType(data['gasPrice'], 'String');
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'String');
            }
            if (data.hasOwnProperty('input')) {
                obj['input'] = ApiClient.convertToType(data['input'], 'String');
            }
            if (data.hasOwnProperty('nonce')) {
                obj['nonce'] = ApiClient.convertToType(data['nonce'], 'Number');
            }
            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('receipt')) {
                obj['receipt'] = TransactionReceipt.constructFromObject(data['receipt']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['blockHash'] && !(typeof data['blockHash'] === 'string' || data['blockHash'] instanceof String)) {
            throw new Error("Expected the field `blockHash` to be a primitive type in the JSON string but got " + data['blockHash']);
        }
        // ensure the json data is a string
        if (data['from'] && !(typeof data['from'] === 'string' || data['from'] instanceof String)) {
            throw new Error("Expected the field `from` to be a primitive type in the JSON string but got " + data['from']);
        }
        // ensure the json data is a string
        if (data['gas'] && !(typeof data['gas'] === 'string' || data['gas'] instanceof String)) {
            throw new Error("Expected the field `gas` to be a primitive type in the JSON string but got " + data['gas']);
        }
        // ensure the json data is a string
        if (data['gasPrice'] && !(typeof data['gasPrice'] === 'string' || data['gasPrice'] instanceof String)) {
            throw new Error("Expected the field `gasPrice` to be a primitive type in the JSON string but got " + data['gasPrice']);
        }
        // ensure the json data is a string
        if (data['hash'] && !(typeof data['hash'] === 'string' || data['hash'] instanceof String)) {
            throw new Error("Expected the field `hash` to be a primitive type in the JSON string but got " + data['hash']);
        }
        // ensure the json data is a string
        if (data['input'] && !(typeof data['input'] === 'string' || data['input'] instanceof String)) {
            throw new Error("Expected the field `input` to be a primitive type in the JSON string but got " + data['input']);
        }
        // ensure the json data is a string
        if (data['to'] && !(typeof data['to'] === 'string' || data['to'] instanceof String)) {
            throw new Error("Expected the field `to` to be a primitive type in the JSON string but got " + data['to']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }
        // validate the optional field `receipt`
        if (data['receipt']) { // data not null
          TransactionReceipt.validateJSON(data['receipt']);
        }

        return true;
    }


}



/**
 * The hash of the block in which the transaction was executed. If this transaction is pending or was discarded, this will be null.
 * @member {String} blockHash
 */
TransactionDetails.prototype['blockHash'] = undefined;

/**
 * The number of the block in which the transaction was executed. If this transaction is pending or was discarded, this will be null.
 * @member {Number} blockNumber
 */
TransactionDetails.prototype['blockNumber'] = undefined;

/**
 * @member {String} from
 */
TransactionDetails.prototype['from'] = undefined;

/**
 * @member {String} gas
 */
TransactionDetails.prototype['gas'] = undefined;

/**
 * @member {String} gasPrice
 */
TransactionDetails.prototype['gasPrice'] = undefined;

/**
 * @member {String} hash
 */
TransactionDetails.prototype['hash'] = undefined;

/**
 * @member {String} input
 */
TransactionDetails.prototype['input'] = undefined;

/**
 * @member {Number} nonce
 */
TransactionDetails.prototype['nonce'] = undefined;

/**
 * @member {String} to
 */
TransactionDetails.prototype['to'] = undefined;

/**
 * @member {String} value
 */
TransactionDetails.prototype['value'] = undefined;

/**
 * @member {module:model/TransactionReceipt} receipt
 */
TransactionDetails.prototype['receipt'] = undefined;






export default TransactionDetails;

